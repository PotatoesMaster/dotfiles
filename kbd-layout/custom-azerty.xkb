//
// Weird custom Azerty keymap
// --------------------------
// If you're interested in editing keyboard mapping, this can prove useful:
//   http://www.charvolant.org/~doug/xkb/html/xkb.html
//
// Differences from French azerty:
//   - Escape take the place of Caps Lock (Caps Lock can be accessed in
//     combination with AltGr)
//   - number in direct access
//   - surrounding characters on AltGr + left hand (AZERQSDF)
//   - no accentuated letters, but dead accents on AltGr + right hand (UIOP)
//   - Delete above Right Shift (Shift + this key is equivalent to Shift +
//     Insert)
//   - special characters displaced
//
// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────╔═════════╗
// │ @  │ 1  │ 2  │ 3  │ 4  │ 5  │ 6  ║ 7  │ 8  │ 9  │ 0  │ |  │    ║         ║
// │ %  │ 1  │ 2  │ 3  │ 4  │ 5  │ 6  ║ 7  │ 8  │ 9  │ 0  │ $  │ #  ║ Bckspc. ║
// ╔════╧══╗─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─╚══╦══════╣
// ║ -->|  ║ A  │ Z  │ E  │ R  │ T  ║ Y  │ U  │ I  │ O  │ P  │ ~  │ ? ¿║      ║
// ║ |<--  ║ a >│ z ]│ e }│ r )│ t  ║ y  │ u ´│ i `│ o ^│ p ¨│ *  │ ! ¡║  <-' ║
// ╠═══════╩╗───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───╚╗     ║
// ║        ║ Q  │ S §│ D  │ F  │ G  ║ H  │ J  │ K  │ L  │ M  │ "  │    ║     ║
// ║Esc Lock║ q <│ s [│ d {│ f (│ g  │ h  │ j  │ k  │ l  │ m `│ ' ^│Del.║     ║
// ╠══════╦═╝──┬─┴──┬─┴──┬─┴─══─┴──┬─┴──┬─┴─══─┴──┬─┴──┬─┴──┬─┴──╔═╧════╩═════╣
// ║      ║ \  │ W  │ X  │ C  │ V  │ B  ║ N  │ :  │ ;  │ +  │ &  ║            ║
// ║LShift║ / \│ w «│ x »│ c ¢│ v “│ b ”║ n  │ .  │ ,  │ - ±│ =  ║ RShift     ║
// ╠══════╩╦═══╧══╦═╧═══╦╧════╧════╧════╧════╧════╧╦═══╧═╦══╧══╦═╩═══╦════════╝
// ║       ║      ║     ║ _                        ║     ║     ║     ║
// ║ Ctrl  ║Super ║ Alt ║ Space               NBSP ║AltGr║ `   ║Ctrl ║
// ╚═══════╩══════╩═════╩══════════════════════════╩═════╩═════╩═════╝

xkb_keymap {

    xkb_keycodes {
        include "evdev"
    };

    xkb_types {
        include "complete+caps(shift)"
            type "ALTGR_TWO" {
                modifiers = LevelThree;
                map[None] = Level1;
                map[LevelThree] = Level2;
                level_name[Level1] = "Base";
                level_name[Level2] = "AltGr";
            };
    };

    xkb_compatibility {
        include "complete"

        interpret F24 {
            action = Redirect(Key=<INS>, modifiers=Shift); // insert-shift
        };
    };

    partial alphanumeric_keys xkb_symbols "dvorak" {
        include "pc(pc105)+fr+keypad(ossnumber)+inet(evdev)+terminate(ctrl_alt_bksp)"

        // ESC act as the Compose key
        key <ESC> { [ Multi_key, Multi_key, XF86_Ungrab, XF86_ClearGrab ] };

        key <TLDE> { [ percent, at ] }; // % @

        // Numbers in direct access
        key <AE01> { [ 1 ] }; // 1
        key <AE02> { [ 2 ] }; // 2
        key <AE03> { [ 3 ] }; // 3
        key <AE04> { [ 4 ] }; // 4
        key <AE05> { [ 5 ] }; // 5
        key <AE06> { [ 6 ] }; // 6
        key <AE07> { [ 7 ] }; // 7
        key <AE08> { [ 8 ] }; // 8
        key <AE09> { [ 9 ] }; // 9
        key <AE10> { [ 0 ] }; // 0

        key <AE11> { [ dollar, bar ] }; // $ |
        key <AE12> { [ numbersign ] }; // #

        // Special characters and accents are placed on AltGr + Letters
        key <AD01> { [ a, A, greater ] }; // a A >
        key <AD02> { [ z, Z, bracketright ] }; // z Z ]
        key <AD03> { [ e, E, braceright ] }; // e E }
        key <AD04> { [ r, R, parenright ] }; // r R )
        key <AD05> { [ t, T ] }; // t T
        key <AD06> { [ y, Y ] }; // y Y
        key <AD07> { [ u, U, dead_acute ] }; // u U ´
        key <AD08> { [ i, I, dead_grave ] }; // i I `
        key <AD09> { [ o, O, dead_circumflex ] }; // o O ^
        key <AD10> { [ p, P, dead_diaeresis ] }; // p P ¨
        key <AD11> { [ asterisk, asciitilde ] }; // * ~
        key <AD12> { [ exclam, question, exclamdown, questiondown ] }; // ! ? ¡ ¿

        // Caps Lock is accessible in combination with AltGr, it acts as the
        // Escape key otherwise
        key <CAPS> { type = "ALTGR_TWO", [ Escape, Caps_Lock ], actions = [ NoAction(), LockMods(modifiers=Lock) ] };

        key <AC01> { [ q, Q, less ] }; // q Q <
        key <AC02> { [ s, S, bracketleft ] }; // s S [
        key <AC03> { [ d, D, braceleft ] }; // d D {
        key <AC04> { [ f, F, parenleft ] }; // f F (
        key <AC05> { [ g, G ] }; // g G
        key <AC06> { [ h, H ] }; // h H
        key <AC07> { [ j, J ] }; // j J
        key <AC08> { [ k, K ] }; // k K
        key <AC09> { [ l, L ] }; // l L
        key <AC10> { [ m, M, asciicircum, mu ] }; // m M ^ µ
        key <AC11> { [ apostrophe, quotedbl, grave ] }; // ' " `
        key <BKSL> { [ Delete, F24 ] };

        // An other Caps Lock alternative: AltGr + Left Shift
        //key <LFSH> { type = "ALTGR_TWO", [ Shift_L, Caps_Lock ], actions = [ SetMods(modifiers=Shift), LockMods(modifiers=Lock) ] };

        key <LFSH> { [ Shift_L ], actions = [ SetMods(modifiers=Shift) ] };

        key <LSGT> { [ slash, backslash, backslash ] }; // / \ 
        key <AB01> { [ w, W, guillemotleft ] }; // w W «
        key <AB02> { [ x, X, guillemotright ] }; // x X »
        key <AB03> { [ c, C ] }; // c C
        key <AB04> { [ v, V ] }; // v V
        key <AB05> { [ b, B ] }; // b B
        key <AB06> { [ n, N ] }; // n N
        key <AB07> { [ period, colon ] }; // . :
        key <AB08> { [ comma, semicolon ] }; // , ;
        key <AB09> { [ minus, plus, plusminus ] }; // - +
        key <AB10> { [ equal, ampersand ] }; // = &
        key <RTSH> { [ Shift_R ], actions = [ SetMods(modifiers=Shift) ] };

        // Underscore on Shift + Space, I love it :)
        key <SPCE> { [ space, underscore, nobreakspace, nobreakspace ] }; // SPC _ NBSP

        key <MENU> { [ grave, Menu ] };

        modifier_map Control { <LCTL> };
        modifier_map Control { <RCTL> };
        modifier_map Mod1 { <LALT> };
        modifier_map Mod2 { <NMLK> };
        modifier_map Mod4 { <LWIN> };
        modifier_map Mod4 { <RWIN> };
        modifier_map Mod4 { <SUPR> };
        modifier_map Mod4 { <HYPR> };
        modifier_map Mod5 { <RALT> };
    };

    xkb_geometry {
        include "pc(pc105)"
    };
};
