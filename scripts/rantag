#!/bin/python

import os
import sys
from ranger.container.tags import Tags

def confpath(*paths):
    return os.path.join(arg.confdir, *paths)

def parse_arguments():
    """Parse the program arguments"""
    from optparse import OptionParser, SUPPRESS_HELP
    from os.path import expanduser
    from ranger import CONFDIR
    from ranger.ext.openstruct import OpenStruct

    if 'XDG_CONFIG_HOME' in os.environ and os.environ['XDG_CONFIG_HOME']:
        default_confdir = os.environ['XDG_CONFIG_HOME'] + '/ranger'
    else:
        default_confdir = CONFDIR

    parser = OptionParser(usage='%prog action [params]')

    parser.add_option('-v', '--verbose', action='store_true',
            help="activate verbose mode")

    parser.add_option('-d', '--dry', action='store_true',
            help="do not actually modify files")

    parser.add_option('-r', '--confdir', type='string',
            metavar='dir', default=default_confdir,
            help="change the configuration directory. (%default)")

    options, positional = parser.parse_args()
    action = None if len(positional) < 1 else positional.pop(0)
    arg = OpenStruct(options.__dict__, action=action, positional=positional)
    arg.confdir = expanduser(arg.confdir)

    return arg


class NormalFailure(Exception):
    pass


class Rantag():

    def __init__(self, tags, logger, options):
        self.tags = tags
        self.log = logger
        self.options = options

    def __getitem__(self, name):
        return self.__getattribute__(name)

    def execute(self, action, *args):
        self[action](*args)

    def get_tag(self, filename):
        self.log('getting tag for file {}'.format(filename.__repr__()))
        if filename in self.tags.tags:
            print(self.tags.tags[filename])
        else:
            self.log('file {} has no tag, exiting'.format(filename.__repr__()))
            raise NormalFailure()

    def maybe_set_play(self, filename):
        from os.path import dirname

        play_tag = '>'
        self.log('maybe set play tag on file {}'.format(filename.__repr__()))

        if self.tags.tags.get(filename) == play_tag:
            self.log('file has play tag already, do nothing')
            return

        # get parent dir tag
        parentpath = dirname(filename)
        parent_tag = self.tags.tags.get(parentpath)
        if parent_tag == play_tag:
            self.log('parent has play tag, do nothing')
            return

        dirpart = parentpath + '/'
        tagged_siblings = [f for f in self.tags.tags.keys() if f.startswith(dirpart)]
        if len(tagged_siblings) > 0:
            self.log('there are tagged siblings, do nothing')
            return

        self.log('set play tag on file and on parent')

        if self.options.dry:
            self.log('dry mode, do nothing')
            return

        self.tags.add(filename, tag=play_tag)
        self.tags.add(parentpath, tag=play_tag)


if __name__ == '__main__':
    arg = parse_arguments()

    if arg.verbose:
        def log(msg):
            print(msg)
    else:
        def log(msg):
            pass

    if arg.action is None:
        log('Nothing to do')
        sys.exit(0)

    rantag = Rantag(Tags(confpath('tagged')), log, arg)
    try:
        rantag.execute(arg.action, *arg.positional)
    except TypeError as e:
        print('Error: {}'.format(e))
        sys.exit(1)
    except NormalFailure:
        sys.exit(1)
