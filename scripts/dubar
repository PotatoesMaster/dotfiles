#!/usr/bin/env python
# Copyright (C) 2013  Emanuel GuÃ©vel
# This software is distributed under the terms of the GNU GPL version 3.

# Some chunks of code are stolen from ranger, a file manager for the console ;)

from subprocess import Popen, PIPE
ESC_CHAR = chr(0x1b)
RESET = ESC_CHAR + '[0m'
FG_COLORS = [ESC_CHAR + '[3' + str(x) + 'm' for x in range(8)]
BG_COLORS = [ESC_CHAR + '[7;3' + str(x) + 'm' for x in range(8)]

def spawn(*args):
    """Run the given command and return its stdout.
    """
    # Adapted from ranger.ext.spawn
    process = Popen(args, stdout=PIPE, shell=True)
    stdout, stderr = process.communicate()
    return stdout.decode('utf-8')

def human(byte):
    """Convert a large number of bytes to an easily readable format.

    >>> human(54)
    '54K'
    >>> human(1500)
    '1.5M'
    >>> human(2 ** 20 * 1023)
    '1023G'
    """
    # Adapted from ranger.ext.human_readable
    if byte <= 0:
        return '0'
    if byte < 2**10:
        return '%dK'   % byte
    if byte < 2**10 * 99:
        return '%.2gM' % (byte / 2**10.0)
    if byte < 2**10 * 999:
        return '%.3gM' % (byte / 2**10.0)
    if byte < 2**20:
        return '%.4gM' % (byte / 2**10.0)
    if byte < 2**20 * 99:
        return '%.2gG' % (byte / 2**20.0)
    if byte < 2**20 * 999:
        return '%.3gG' % (byte / 2**20.0)
    if byte < 2**30:
        return '%.4gG' % (byte / 2**20.0)
    if byte < 2**30 * 99:
        return '%.2gT' % (byte / 2**30.0)
    if byte < 2**30 * 999:
        return '%.3gT' % (byte / 2**30.0)
    if byte < 2**40:
        return '%.4gT' % (byte / 2**30.0)
    if byte < 2**30 * 99:
        return '%.2gP' % (byte / 2**40.0)
    if byte < 2**40 * 999:
        return '%.3gP' % (byte / 2**40.0)
    if byte < 2**50:
        return '%.4gP' % (byte / 2**40.0)
    return '>9000'

_color = 1
def next_color():
    """A function that return a background color escape sequence.
    Multiple invocations will cycle through the 8 base colors.
    """
    global _color
    char = BG_COLORS[_color]
    _color = (_color + 1) % 8
    return char

# Get folders' sizes from the du command
du_result = [line.split('\t') for line in spawn('du --max-depth=1 --apparent-size .').rstrip('\n').split('\n')]

# Remove total size (for directory '.', including its files and subdirectories)
total = int(du_result.pop()[0])

# Convert the size to int and calculate the percentage of size occupied by
# each directory
sizes = [(int(size), int(size) / total, directory[2:]) for size, directory in du_result]

subdir_total = 0
for s in sizes:
    subdir_total += s[0]
# This gives a bad estimate for sizes in kilobytes
rootfiles_total = total - subdir_total
sizes += [(rootfiles_total, rootfiles_total / total, '.')]

sizes.sort(key=lambda x: x[0], reverse=True)

# Build a colorful bar and its legend (that include the directory list and
# their size)
cols = spawn('tput cols')
total_chars = int(cols) - 2 if cols else 80
available_chars = total_chars
output = ' '
file_list = '{}\n Total size: {}\n\n'.format(RESET, human(total))
legend_line = ' {} {} {:>5}  {}\n'
it = iter(sizes)
for size, percent, directory in it:
    nbchar = int(total_chars * percent + 0.5)
    color = next_color()
    if nbchar == 0 or nbchar >= available_chars:
        nbchar = available_chars
        output += color + ' ' * nbchar
        file_list += legend_line.format(color, RESET, human(size), directory)
        for size, percent, directory in it:
            file_list += legend_line.format(color, RESET, human(size), directory)
        break
    output += color + ' ' * nbchar
    file_list += legend_line.format(color, RESET, human(size), directory)
    available_chars -= nbchar
    if available_chars <= 0:
        break

# Display the colorful bar and its legend
output += RESET + '\n'
print('\n' + output * 2,file_list)
