# ======================================================================
# ~/.zshrc -  config file for zsh (z shell)
# ======================================================================

## TTY RELATED STUFF ####################################################### {{{
if [ "$TERM" = "linux" ]; then
    # color hack
  # echo -en "\e]P01b1b1b" #black
  echo -en "\e]P8555753" #darkgrey
  echo -en "\e]P1ff6b6b" #darkred
  echo -en "\e]P9ff8d8d" #red
  echo -en "\e]P2a3d46e" #darkgreen
  echo -en "\e]PAc8e7a8" #green
  echo -en "\e]P3eaca75" #brown
  echo -en "\e]PBffd155" #yellow
  echo -en "\e]P4435e87" #darkblue
  echo -en "\e]PC587aa4" #blue
  echo -en "\e]P5cf8243" #darkmagenta
  echo -en "\e]PDf6a24f" #magenta
  echo -en "\e]P6789ec6" #darkcyan
  echo -en "\e]PE46a4ff" #cyan
  echo -en "\e]P7ababab" #lightgrey
  echo -en "\e]PFababab" #white
  clear #for background artifacting
  export PATH=$HOME/.bin:$PATH

    # mplayer on framebuffer
    alias mplayer='mplayer -vo fbdev'
fi
############################################################################ }}}

## OPTIONS ################################################################# {{{

# autoload {{{
autoload zmv

#}}}

# general options {{{

WORDCHARS="~$^"

# never beep, NEVER!
setopt nobeep
unsetopt hist_beep
unsetopt list_beep

# disable <C-q> and <C-s> in shell's line editor
unsetopt flow_control
# allows #comments, useful when copy-pasting
setopt interactive_comments
unsetopt rm_star_silent

setopt short_loops

setopt GLOB_COMPLETE
setopt auto_remove_slash
setopt chase_links

# push on cd
setopt auto_pushd
setopt pushd_ignore_dups
# "pushd" without arg = "pushd $HOME"
setopt pushd_to_home

# nice bg jobs to 0
unsetopt bg_nice
# no hup to bg job on exit
unsetopt hup

# activate colors
autoload -U colors && colors
# LS_COLORS
# eval $(dircolors ~/.ls_colors)
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.tlz=00;31:*.txz=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.dz=00;31:*.gz=00;31:*.lz=00;31:*.xz=00;31:*.bz2=00;31:*.bz=00;31:*.tbz=00;31:*.tbz2=00;31:*.tz=00;31:*.deb=00;31:*.rpm=00;31:*.jar=00;31:*.war=00;31:*.ear=00;31:*.sar=00;31:*.rar=00;31:*.ace=00;31:*.zoo=00;31:*.cpio=00;31:*.7z=00;31:*.rz=00;31:*.cbz=00;31:*.cbr=00;31:*.jpg=00;33:*.jpeg=00;33:*.gif=00;33:*.bmp=00;33:*.pbm=00;33:*.pgm=00;33:*.ppm=00;33:*.tga=00;33:*.xbm=00;33:*.xpm=00;33:*.tif=00;33:*.tiff=00;33:*.png=00;33:*.svg=00;33:*.svgz=00;33:*.mng=00;33:*.pcx=00;33:*.xcf=00;33:*.emf=00;33:*.mov=00;35:*.mpg=00;35:*.mpeg=00;35:*.m2v=00;35:*.mkv=00;35:*.webm=00;35:*.ogm=00;35:*.mp4=00;35:*.m4v=00;35:*.mp4v=00;35:*.vob=00;35:*.qt=00;35:*.nuv=00;35:*.wmv=00;35:*.asf=00;35:*.rm=00;35:*.rmvb=00;35:*.flc=00;35:*.avi=00;35:*.fli=00;35:*.flv=00;35:*.gl=00;35:*.dl=00;35:*.xwd=00;35:*.yuv=00;35:*.cgm=00;35:*.axv=00;35:*.anx=00;35:*.ogv=00;35:*.ogx=00;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:';

#}}}

# completion options {{{

export LISTMAX=100000

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' use-compctl false

zstyle ':completion:*:descriptions' format "%{[1;33m%}-- %d --%{[0m%}"
zstyle ':completion:*:warnings'     format "%{[1;31m%}No matches for:%{[0m%} %d"
zstyle ':completion:*:default'      list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:default'      list-grouped true
zstyle ':completion:*:default'      menu select=long
zstyle ':completion:*:matches'      group 'yes'
zstyle ':completion:*'              group-name ''
#zstyle ':completion:*' menu yes select
#zstyle ':completion:*' force-list always

setopt list_packed
setopt list_rows_first
setopt list_ambiguous
zstyle ':completion:*:sudo:*'   command-path /usr/local/sbin /usr/local/bin \
                                  /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
zstyle ':completion:*'          use-cache yes
zstyle ':completion:*:default'  cache-path ~/.zsh_cache
zstyle ':completion:*:daemon:*' command-path /etc/rc.d

zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# Ignore completion functions for commands you don't have:
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

# complete manual by their section
zstyle ':completion:*:manuals'    separate-sections true
zstyle ':completion:*:manuals.*'  insert-sections   true

zmodload zsh/complist

setopt hist_ignore_space
setopt extendedglob
#setopt completealiases
unsetopt menucomplete

zstyle ':completion:*:*:kill:*:processes' command 'ps -axco pid,user,command'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=0=31=33'
zstyle ':completion:*:*:*:*:options' list-colors '=(#b.*) #-- (.*)=0=33'

zstyle :compinstall filename "$HOME/.zshrc"
FPATH=~"/.zsh/completion:$FPATH"
autoload -U compinit

compinit
setopt correct

autoload compdef
compdef _man run-help
# I don't want to type a password when I type `sudo something`
# but I don't want either scripts or program (ex: yaourt) to sudo silently
compdef _sudo sudo nopasssudo

# some custom completions
compctl -/ -g '*.pdf' zathura
compctl -/ -g '*.(htm|html|gif)' luakit lk
compctl -/ -g '*.(tgz|gz|xz)' namcap
compctl -/ -g '*(/)' md cl
compctl -/ -W '/usr/share/info/' -g '*' mano

source ~/.zsh/git-flow-completion.zsh
# }}}

# power completion - abbreviation expansion {{{

# see http://zshwiki.org/home/examples/zleiab for details
# less risky than the global aliases but powerful as well
# just type the abbreviation key and afterwards '\eg' to expand it
declare -A abk
setopt extendedglob
setopt interactivecomments
abk=(
#   key   # value                  (#d additional doc string)
#A# start
    'bg'   '& exit ; exit'
    'g'    '|& grep  '
    'h'    '| head'
    'hl'   ' --help |& less -r'    #d (Display help in pager)
    'l'    '| less'
    'll'   '|& less -r'
    'n'    '&>/dev/null'           #d (No Output)
    'r'    '| tr A-z N-za-m'       #d (ROT13)
    'sl'   '| sort | less'
    's'    '| sort -u'
    'u'    '| filter_uniq'
    't'    '| tail'
    'v'    '|& vim -'
        'yn'   '&& echo yes || echo no'
#A# end
)

globalias() {
    emulate -L zsh
    setopt extendedglob
    local MATCH

    matched_chars='[.-|_a-zA-Z0-9]#'
    LBUFFER=${LBUFFER%%(#m)[.-|_a-zA-Z0-9]#}
    LBUFFER+=${abk[$MATCH]:-$MATCH}
}

zle -N globalias
# }}}

# history options {{{
export SAVEHIST=1000
export HISTSIZE=1000
export HISTFILE=$HOME/.history
setopt INC_APPEND_HISTORY
setopt HIST_SAVE_NO_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt NO_BANG_HIST

# don't add garbage to history
function hist() {
    [[ "$#1" -lt 7 \
    || "$1" = "run-help "* \
    || "$1" = "cd "* \
    || "$1" = "cdr" \
    || "$1" = "cdr "* \
    || "$1" = "man "* \
    || "$1" = "h "* \
    || "$1" = "~ "* ]]
    return $(( 1 - $? ))
}
autoload add-zsh-hook
add-zsh-hook zshaddhistory hist

# cdr
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs
#zstyle ':completion:*:*:cdr:*:*' menu selection
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-insert true
zstyle ':chpwd:*' recent-dirs-prune parent

[[ -n "$(alias run-help)" ]] && unalias run-help
autoload run-help
autoload run-help-sudo
#}}}

############################################################################ }}}

## NAMED DIRECTORIES ####################################################### {{{
hash -d B="$HOME/.backgrounds"
hash -d G="$HOME/games"
hash -d M="$HOME/music"
hash -d R="$HOME/sources/python/ranger"
hash -d S="$HOME/sources"
hash -d T="$HOME/downloads/torrents"
hash -d a="$HOME/animes"
hash -d b="$HOME/books"
hash -d c="$HOME/.config"
hash -d d="$HOME/documents"
hash -d g="$HOME/sources/_misc/repos/git"
hash -d i="$HOME/images"
hash -d j="$HOME/downloads/jdownloader"
hash -d l="$HOME/.local/share"
hash -d m="$HOME/m2lse"
hash -d o="$HOME/sources/_misc/repos/github.me/openmw"
hash -d s="$HOME/scans"
hash -d t="$HOME/tablatures"
hash -d v="$HOME/videos"
hash -d w="$HOME/downloads"
hash -d x="$HOME/.bin"
hash -d y="$HOME/sources/_misc/build_sandbox"
hash -d z="$HOME/documents/zines"

hash -d vimfiles='/usr/share/vim/vimfiles'
hash -d pacman_pkg='/var/cache/pacman/pkg'
hash -d pyranger='/usr/lib/python3.3/site-packages/ranger'
hash -d py26='/usr/lib/python2.6/site-packages'
hash -d py27='/usr/lib/python2.7/site-packages'
hash -d py32='/usr/lib/python3.2/site-packages'
hash -d py33='/usr/lib/python3.3/site-packages'
############################################################################ }}}

## ALIASES ################################################################# {{{

alias pandoc='pandoc --smart --normalize --reference-links'
alias wwwget='wget --trust-server-names --content-disposition'
alias texmex='latexmk -pdf -pdflatex="/usr/bin/xelatex -shell-escape" -interaction=nonstopmode'
alias mencode_mmmkay='mencoder -mc 0 -noskip -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf harddup -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=15:vstrict=0:acodec=mp2:abitrate=192'
alias mencode_cam='mencoder -mc 0 -noskip -oac lavc -ovc lavc -of mpeg -mpegopts format=dvd:tsaf -vf harddup -tv driver=v4l2:device=/dev/video0:forceaudio:adevice=/dev/dsp -srate 48000 -af lavcresample=48000 -lavcopts vcodec=mpeg2video:vrc_buf_size=1835:vrc_maxrate=9800:vbitrate=5000:keyint=15:vstrict=0:acodec=mp2:abitrate=192 tv:// -o'
alias pacgraph="pacgraph -d '#ff3200' -t '#ff8700' -l '#d77f66' -b '#1c1c1c' --disable-palette"
alias accorder=lingot
alias noswap='sudo swapoff /dev/sda2'
alias whatisthismpdjamendotrack='searchjam "$(mpc -f "%file%")"'
alias gollum='killall gollum;gollum'
alias eman='MANPATH=/usr/lib/erlang/man man'

# amnesia
for i in '' -justine -launcher ; do
    alias amnesia$i="export force_s3tc_enable=true;amnesia-tdd$i"
done

alias scope.sh='~c/ranger/scope.sh'

# life is to short to always type the same things :)
alias s='sudo'
alias v='vim'
alias vd='vimdiff'
alias V='sudo vim'
alias VD='sudo vimdiff'
alias g='git'
alias xk='xkbcomp -w 0 -R/usr/share/X11/xkb/ ~/.clavier/mon_mien.xkb $DISPLAY'
alias newsoptim='sqlite ~l/newsbeuter/cache.db VACUUM'
alias cupstart='sudo systemctl load cups && sudo systemctl start cups'
alias cupstop='sudo systemctl stop cups'
alias cups_update_gutenprint='sudo /usr/sbin/cups-genppdupdate'
alias netctl='sudo /usr/bin/netctl'
alias netctl-auto-restart='sudo netctl-auto stop wlan0 && sudo netctl-auto start wlan0'

# workaround for my problem at remembering the names of image magick tools
for n in animate compare composite conjure convert display identify import mogrify montage stream; do
    alias im-$n=$n
done

alias ranger='LESS=R$LESS ranger'
alias dfc='dfc -fTw -c always | /usr/bin/grep -P "(sd[ab]|media)"'
alias cd=cdr
alias topdf='libreoffice --invisible --convert-to pdf'

alias dnsreverse="nmap -oG - -sL"

# sometimes required after a kernel update
alias alsa-retore='sudo alsactl -f /var/lib/alsa/asound.state store'

# reminder aliases
alias printer='lp'

alias commentva-kernel='sudo tail /var/log/kernel.log -f'

alias :xkeylist='vim /usr/include/X11/keysymdef.h'
alias :xkbfr='vim /usr/share/X11/xkb/symbols/fr'

alias misc='man ~d/man/astuces/misc.1.gz'
alias installed='LANG=C pacman -Qi | awk '"'"'/^Name/ {pkg=$3} /Size/ {print $4$5,pkg}'"'"' | sort -n'

# nice ls (colors and stuff)
alias ls='ls --classify --tabsize=0 --group-directories-first --literal --color=auto --show-control-chars --human-readable'
alias ll='ls -l'
alias la='ls -A'
alias lla='ls -lA'
alias lt='ls -ltr'
alias dir='ls -lSrah'
alias lad='ls -d .*(/)'              # only show dot-directories
alias lsa='ls -a .*(.)'              # only show dot-files
alias lss='ls -l *(s,S,t)'           # only files with setgid/setuid/sticky flag
alias lsl='ls -l *(@)'               # only symlinks
alias lsx='ls -l *(*)'               # only executables
alias lsw='ls -ld *(R,W,X.^ND/)'     # world-{readable,writable,executable} files
alias lsbig="ls -flh *(.OL[1,10])"   # display the biggest files
alias lsd='ls -d *(/)'               # only show directories
alias lse='ls -d *(/^F)'             # only show empty directories
alias lsnew='ls -tlh *(D.om[1,10])'  # display the newest files
alias lsold='ls -rtlh *(D.Om[1,10])' # display the oldest files
alias lssmall='ls -Srl *(.oL[1,10])' # display the smallest files

alias rd='rmdir'
alias lkg='linkgrab'
alias cli='clisp -q -q -v -x "(setq *print-case* :downcase)" -repl'
alias r100='mogrify -filter lanczos -resize 100x100'
function v100 () {
    convert "$1" -filter lanczos -resize 100x100 - | display
}

alias ems-flasher='ems-flasher --verbose'
alias sudo='sudo nopasssudo'
alias http-headers='noglob wget --server-response -O /dev/null -q'
alias archinstall='date -d "`head /var/log/pacman.log -n 1 | perl -ne '"'print for /\[([^\]]+)\]/'"'`"'
alias less='less -R'
alias df='df --human-readable'
alias du='du --human-readable'
alias amoi='sudo chown tharek:users'
alias aroot='sudo chown root:root'
alias ux='chmod u+x'
alias urge='echo "\007\c"'
alias waspi='wget -rpkE -l 0 -nc -np -nH'
alias wsave='wget -pkE -nc -np -nH'
alias maj='yaourt -Syu --aur --devel'
alias sql='mysql -u root'
alias zmv='noglob zmv'
alias grep='grep --color=auto'
alias info='info --vi-keys'
alias zrc='vim ~/.zshrc && source ~/.zshrc && zcompile ~/.zshrc'
alias xmp='mplayer -prefer-ipv4 -cache 30000 -cache-min 3 -unicode -utf8 "`xsel -o`"'
alias hl='highlight --out-format=ansi'
alias h='run-help'
alias sqlite='sqlite3 -column'
alias url='filtr '"'"'/((?:https?:\/\/|ftp:\/\/|news:\/\/|mailto:|file:\/\/|www\.)[\w\-\@;\/?:&=%\$_.+!*\x27(),~#]+[\w\-\@;\/?&=%\$_+!*\x27()~])/g'"' | filter_uniq"
alias hrefs='filtr '"'"'/href="([^"]+)"/g'"'"' | filter_uniq'
alias filter_uniq="awk '!x[\$0]++'"

############################################################################ }}}

## FUNCTIONS ############################################################### {{{

# diff time machine
function prediff() {
    if [[ $# != 1 ]]; then
        echo "prediff, make a copy in a temporary directory.\nusage: prediff <filename>\nRun postdiff to make a diff."
    else
        name="$(basename "$1")"
        mkdir -p "/tmp/difftm"
        cp "$1" "/tmp/difftm/$name"
    fi
}
function postdiff() {
    if [[ $# != 1 ]]; then
        echo "postdiff, diff a file previously copied with prediff.\nusage: postdiff <filename>"
    else
        name="$(basename "$1")"
        filepath="$1"
        shift
        diff "$@" "/tmp/difftm/$name" "$filepath"
    fi
}

function hi2odt() {
    if [ $# -lt 2 ]; then
        echo 'usage: hi2odt src dest [extra]'
        return
    fi
    param1=$1
    param2=$2
    shift 2
    highlight -O odt --config-file ~c/highlight/themes/brightvariant.theme "$@" -- "$param1" | sed 's/Standard/code/g;s/FreeMono/Inconsolata/g' | ifne sponge "$param2"
}

# hex to dec
function todec() {
    printf "$(for i in "$@"; do print -n '%d '; done)\n" $(for i in "$@"; do print -n ' 0x'$i; done)
}
# dec to hex
function tohex() {
    printf "$(for i in "$@"; do print -n '%x '; done)\n" "$@"
}

function searchjam() {
    xml sel -t -v "//track[id=\"${${1%&stream*}##*id=}\"]" ~/.mpd/jamendo.xml
}

# search a library
function findlib () {
    find /lib /usr/lib /lib64 /usr/lib32 -name "*$1*.so*"
}

# quvi
function dly () {
    if [ $# = 0 ] ; then
        quvi -f mp4_720p --exec "wget -c %u -O %t.mp4" "`xsel -o`"
    else
        quvi -f mp4_720p --exec "wget -c %u -O %t.mp4" $@
    fi
}

# conversion
function flactomp3   {
    flac -d "$1" -c | lame -b 320 - "${1%.flac}.mp3"
}

function flactoogg   {
    ffmpeg -i "$1" -acodec libvorbis -ac 2 -ab 128k "${1%.flac}.ogg"
}

accessed()           { print -l -- *(a-${1:-1}) }
changed()            { print -l -- *(c-${1:-1}) }
modified()           { print -l -- *(m-${1:-1}) }

function waitend()       { while pgrep "$1" ; do sleep "${2-5}" ; done }
function shutdownafter() { waitend "$1" 30 && sudo shutdown -h now }

function filtr()     { [ $# = 1 ] && perl -ne "print "'"$_\n"'" for $1" || perl -ne "print \"$1\" for $2" }
function replace()   { [ $# = 2 ] && perl -pe "$2" -i "$1" || echo "replace file command\nex: replace foo.bar s/foo/bar/g" }
function rantag()    { f=":$(readlink -f "$1")"; tags="$(grep -v "^.$f$" ~/.config/ranger/tagged)\n${${2:0:1}:-*}$f"; echo -n "$tags" | sort -u --key=1.3 > ~/.config/ranger/tagged }
function cssdata()   { [ $# -lt 2 ] && echo "Usage: cssdata file type\nex: cssdata foo.gif image/gif" && return 1 echo -n "url(\"data:$2;base64,"; base64 -w0 $1; echo -n "\")" }
function trash()     { mv $@ $HOME/.trash }
function jamadd()    { [ $# -lt 1 ] && url="$(xsel -o)" || url="$1"; id="${url##*/}"; mpc add "http://api.jamendo.com/get2/stream/track/redirect/?id=$id&streamencoding=mp31" }
function jamaddalbum() { [ $# -lt 1 ] && url="$(xsel -o)" || url="$1"; curl "$url" | sed 's+/track+\n/track+g'| perl -ne 'print "$_\n" for /\/track\/(\d+)/' | filter_uniq | while read i; do mpc add "http://api.jamendo.com/get2/stream/track/redirect/?id=$i&streamencoding=mp31"; done }
function jamplay()   { [ $# -lt 1 ] && url="$(xsel -o)" || url="$1"; curl "$url" | sed 's+/track+\n/track+g'| perl -ne 'print "$_\n" for /\/track\/(\d+)/' | filter_uniq | while read i; do echo "http://api.jamendo.com/get2/stream/track/redirect/?id=$i&streamencoding=mp31"; done > /tmp/jamendo-playlist; mplayer -playlist /tmp/jamendo-playlist }
function jamplayone(){ [ $# -lt 1 ] && url="$(xsel -o)" || url="$1"; echo "$url" | sed 's+/track+\n/track+g'| perl -ne 'print "$_\n" for /\/track\/(\d+)/' | filter_uniq | read i; mplayer "http://api.jamendo.com/get2/stream/track/redirect/?id=$i&streamencoding=mp31" }
function calc()      { echo $(($@)) }; alias '~'='noglob calc'
function gitvimdiff  { GIT_EXTERNAL_DIFF="git_diff_wrapper" git --no-pager diff "$@" }
function album_id    { track_id="$(mpc -f '%file%' | filtr '/id=(\d+)/')"; echo "Track id is $track_id" >&2 ; perl -lne "print for /<album><id>(\\d+)<\\/id>.*?<track><id>$track_id<\\/id>/" < .mpd/jamendo.xml >&1 }
function dl_current  { oggjam "http://www.jamendo.com/en/album/`jamlbum_id`" }
function up()        { for updirs in $(seq ${1:-1}); do cd ..; done; }
function vimpatch()  { vim "$1" +"vert diffpa $2" }
function join()      { glue=$1; shift; echo "${(ej:${glue}:)@}" }
function xvid()      { mencoder -oac mp3lame -ovc xvid -vf scale=1280:720 "$1" -o "$2" -xvidencopts bitrate=1400 }

# package-related stuff
function yql         { /usr/bin/pacman -Ql $@ | sed 's/^[^ ]\+ //;/\/$/ d' }
function grepkg() {
    (( $# < 2 )) && return
    pkg="$1"
    shift
    grep $@ `/usr/bin/pacman -Ql $pkg \
        | sed 's/^[^ ]\+ //;/\/$/ d;/\.bmp$/ d;/\.gif$/ d;/png$/ d;/tga$/ d;/so$/ d;/gz$/ d;/tgz$/ d;/zip$/ d;/class$/ d;/mo$/ d'`
}
function findpkg() {
    (( $# < 2 )) && return
    pkg="$1"
    shift
    yql $pkg | grep $@
}

function mountiso() {
  if [ ! "$1" ]; then
    echo "missing iso image argument"
    return
    elif [ ! -f "$1" ]; then
    echo "$1: iso image not found"
    return
  elif [ "`mount | grep /mnt/iso`" ]; then
    echo "/mnt/iso is already in use"
    return
  fi
  sudo mount -t iso9660 -o loop,ro "$1" /mnt/iso
}

function cl()       { cd "$1" && ls }

# mkdir, then cd
function md()       { mkdir -p "$@" && cd "$@" }

# mkdir, then mv
function mvd() {
    if [ $# -lt 2 ]; then
        echo "fail" >&2
        return
    fi
    last="$@[$#@]"
    [ $# -eq 2 ] && last="${last%/}/"
    mkdir -p "${last#/*}" \
        && mv $@
}

# mkdir, then mv, then cd
function mvcd() {
    if [ $# -lt 2 ]; then
        echo "fail" >&2
        return
    fi
    last="$@[$#@]"
    [ $# -eq 2 ] && last="${last%/}/"
    mkdir -p "${last%/*}" \
        && mv $@ \
        && cd "${last%/*}"
}

# mkdir, then cp
function cpd() {
    if [ $# -lt 2 ]; then
        echo "fail" >&2
        return
    fi
    last="$@[$#@]"
    if [ $# -lt 2 ]
    then last="${last%/}/"
    fi
    mkdir -p "${last%/*}" \
        && cp $@
}

############################################################################ }}}

## PROMPT SETUP ############################################################ {{{

setopt PROMPT_SUBST
if [[ $UID = 0 ]] ; then
    # root
    PROMPT=' %F{6}%~ %F{1}# %f'
else
    # non-root

    # include git info in prompt
    autoload vcs_info
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '%F{3}+'
    zstyle ':vcs_info:*' unstagedstr '%F{1}*'
    zstyle ':vcs_info:*' actionformats '(%b|%a) '
    zstyle ':vcs_info:*' formats       ' %F{4}%r %F{2}%S %F{6}%b%u%c'

    # prompt for non-git directories
    zstyle ':vcs_info:*' nvcsformats   ' %F{6}%~'

    precmd () { vcs_info }
    #PS1='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '
    #PROMPT=' %F{6}%~ %f${vcs_info_msg_0_}%F{2}§ %f'
    PROMPT=${RANGER_LEVEL+"%S%F{3}%B"${(r:$RANGER_LEVEL+8::+::in ranger:)}%b%s}'${vcs_info_msg_0_} %(0?,%F{2}\$,%F{1}!)%f '

    # Put out a bell-character ($'\a') everytime a command finishes.
    # This will set the urgency hint, if the terminal is configured accordingly
    if [ "$TERM" != linux ]; then
        # update terminal title
        zle-line-init () {
            print -Pn "\e]0;zsh($?): %~\a"
        }
        zle -N zle-line-init
    fi
fi

# RPROMPT=$' %{$fg[magenta]%}%T%{$reset_color%}'
PS2=' %F{6}%_ %F{2}>%f '
PS3=' %F{6}Choice %F{2}?%f '
PS4=$PS2

zle_highlight=(
special:fg=cyan
default:fg=yellow
isearch:fg=red
)

# zsh highlight stuff
. ~g/../git/zsh-syntax-highlighting-filetypes/zsh-syntax-highlighting-filetypes.zsh

############################################################################ }}}

## BINDINGS ################################################################ {{{
bindkey -e

bindkey '\e[3~' delete-char       # Del
bindkey '\e[2~' overwrite-mode    # Insert
bindkey '\e[7~' beginning-of-line # home
bindkey '\e[8~' end-of-line       # end

autoload -U     edit-command-line
zle -N          edit-command-line
bindkey '\ee'   edit-command-line
bindkey '\ei'   menu-select  # menu completion via esc-i

bindkey '\e[Z'  reverse-menu-complete # Shift-Tab
bindkey '^I'    expand-or-complete
bindkey '^[:'   describe-key-briefly

bindkey '^R'    history-incremental-pattern-search-backward
bindkey '\e/'   _history-complete-older

bindkey '\e[A'  history-beginning-search-backward # ↑
bindkey '\e[B'  history-beginning-search-forward  # ↓

bindkey '\eOa'  up-line-or-history   # Ctrl-↑
bindkey '\eOb'  down-line-or-history # Ctrl-↓
bindkey '\eOc'  emacs-forward-word   # Ctrl-→
bindkey '\eOd'  emacs-backward-word  # Ctrl-←

bindkey '\ev'   vi-cmd-mode
bindkey '^X^V'  vi-cmd-mode

# expand global alias
bindkey '\eg'   globalias

insert-last-typed-word() { zle insert-last-word -- 0 -1 };
zle -N insert-last-typed-word;

bindkey '\em'   insert-last-typed-word

# run command line as user root via sudo:
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER != sudo\ * ]]; then
        BUFFER="sudo $BUFFER"
        CURSOR=$(( CURSOR+5 ))
    fi
}
zle -N sudo-command-line
bindkey '^s'  sudo-command-line

# yaourt bindings (yaourt is a wrapper for pacman, Archlinux's package manager)
bindkey -s '^Y'  'yaourt '
bindkey -s '^Yl' 'yaourt -Ql '      # list files
bindkey -s '^Yt' 'yaourt -Qdt'      # list non required packages
bindkey -s '^Yq' 'yaourt -Q '       # list non required packages
bindkey -s '^Yo' 'yaourt -Qo '      # find the package that owns a given file
bindkey -s '^Yu' 'yaourt -U '       # install a package from a local file
bindkey -s '^Yg' 'yaourt -G '       # get a package's PKGBUILD
bindkey -s '^Yr' 'yaourt -Rcs '     # uninstall a package and its unrequired dependencies
bindkey -s '^Yi' 'yaourt -Si '      # get informations on a package from repository
bindkey -s '^Ys' 'yaourt -Qs '      # search in the installed packages
bindkey -s '^Yb' 'yaourt -Sb '      # build and install a package from sources
bindkey -s '^Yc' 'yaourt -C '       # manage .pac* files
bindkey -s '^Yd' 'yaourt -Q --date' # list installed package, sorted by date
bindkey -s '^Ya' 'yaourt -Qua '     # list outdated package
bindkey -s '^Ym' 'yaourt -Qm '      # list package installed locally (build from AUR, for example)

# useful but ugly bindings
bindkey -s 'f' 'for i in ; do  "$i"; doneODODODODODODODODODODODODODODODOD'
bindkey -s 'w' 'while ; do ; doneODODODODODODODODODODOD'

# Esc,Return multiselect
bindkey -M menuselect '\e^M' accept-and-menu-complete
bindkey -M menuselect '^o'   accept-and-infer-next-history
bindkey -M menuselect '\e '  accept-and-infer-next-history

# add a command line to the shells history without executing it
commit-to-history() {
    print -s ${(z)BUFFER}
    zle send-break
}
zle -N commit-to-history
bindkey "^x^h" commit-to-history

############################################################################ }}}

# vim: ft=zsh fdm=marker ai ts=2 sw=2 noet :
