# ======================================================================
# ~/.zshrc -  config file for zsh (z shell)
# ======================================================================

## COMPAT STUFF ############################################################ {{{

# enable 256 colors in tmux
[[ -n "$TMUX" ]] && export TERM=screen-256color

# tty-only settings
if [ "$TERM" = "linux" ]; then
  export PATH=$HOME/.bin:$PATH

  # mpv on framebuffer
  alias mpv='mpv -vo fbdev'
fi
############################################################################ }}}

## OPTIONS ################################################################# {{{

# autoload {{{

autoload zmv

#}}}

# general options {{{

WORDCHARS="~$^"

# display execution time if greater than 30 seconds
REPORTTIME=30

# never beep, NEVER!
setopt nobeep
unsetopt hist_beep
unsetopt list_beep

# disable <C-q> and <C-s> in shell's line editor
unsetopt flow_control
# allows #comments, useful when copy-pasting
setopt interactive_comments
unsetopt rm_star_silent

setopt short_loops

setopt GLOB_COMPLETE
setopt auto_remove_slash
setopt chase_links

# push on cd
setopt auto_pushd
setopt pushd_ignore_dups
# "pushd" without arg = "pushd $HOME"
setopt pushd_to_home

# nice bg jobs to 0
unsetopt bg_nice
# no hup to bg job on exit
unsetopt hup

# activate colors
autoload -U colors && colors
# LS_COLORS
eval $(dircolors ~/.ls_colors)

#}}}

# completion options {{{

export LISTMAX=100000

zstyle ':completion:*:functions' ignored-patterns '_*'

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' use-compctl false

zstyle ':completion:*:descriptions' format "%{[1;33m%}-- %d --%{[0m%}"
zstyle ':completion:*:warnings'     format "%{[1;31m%}No matches for:%{[0m%} %d"
zstyle ':completion:*:default'      list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:default'      list-grouped true
zstyle ':completion:*:default'      menu select=long
zstyle ':completion:*:matches'      group 'yes'
zstyle ':completion:*'              group-name ''
#zstyle ':completion:*' menu yes select
#zstyle ':completion:*' force-list always

setopt list_packed
setopt list_rows_first
setopt list_ambiguous
zstyle ':completion:*:sudo:*'   command-path /usr/local/sbin /usr/local/bin \
                                  /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
zstyle ':completion:*'          use-cache yes
zstyle ':completion:*:default'  cache-path ~/.zsh_cache
zstyle ':completion:*:daemon:*' command-path /etc/rc.d

zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# Ignore completion functions for commands you don't have:
zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

# complete manual by their section
zstyle ':completion:*:manuals'    separate-sections true
zstyle ':completion:*:manuals.*'  insert-sections   true

zmodload zsh/complist

setopt extendedglob
unsetopt menucomplete

zstyle ':completion:*:*:kill:*:processes' command 'ps -axco pid,user,command'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=0=31=33'
zstyle ':completion:*:*:*:*:options' list-colors '=(#b.*) #-- (.*)=0=33'

zstyle :compinstall filename "$HOME/.zshrc"
FPATH=~"/.zsh/completion:$FPATH"
autoload -U compinit

compinit
setopt correct

autoload compdef
compdef _man run-help
# I don't want to type a password when I type `sudo something`
# but I don't want either scripts or program (ex: yaourt) to sudo silently
compdef _sudo sudo nopasssudo

# some custom completions
compctl -/ -g '*.(htm|html|gif)' luakit lk
compctl -/ -g '*.(tgz|gz|xz)' namcap
compctl -/ -g '*(/)' md cl
compctl -/ -W '/usr/share/info/' -g '*' mano

# }}}

# history options {{{
export SAVEHIST=1000
export HISTSIZE=1000
export HISTFILE=$HOME/.history
setopt INC_APPEND_HISTORY
setopt HIST_FIND_NO_DUPS
setopt NO_BANG_HIST

# don't add garbage to history
function hist() {
    [[ "$#1" -lt 7 \
    || "$1" = "run-help "* \
    || "$1" = "cd "* \
    || "$1" = "man "* \
    || "$1" = "h "* \
    || "$1" = "~ "* ]]
    return $(( 1 - $? ))
}
autoload add-zsh-hook
add-zsh-hook zshaddhistory hist

[[ -n "$(alias run-help)" ]] && unalias run-help
autoload run-help
autoload run-help-sudo
#}}}

############################################################################ }}}

## NAMED DIRECTORIES ####################################################### {{{
hash -d B="$HOME/.backgrounds"
hash -d G="$HOME/games"
hash -d R="$HOME/sources/python/ranger"
hash -d S="$HOME/sources"
hash -d T="$HOME/downloads/torrents"
hash -d a="$HOME/animes"
hash -d b="$HOME/books"
hash -d c="$HOME/.config"
hash -d d="$HOME/documents"
hash -d g="$HOME/sources/_misc/repos/git"
hash -d i="$HOME/images"
hash -d l="$HOME/.local/share"
hash -d m="$HOME/music"
hash -d o="$HOME/sources/_misc/repos/github.me/openmw/apps/openmw"
hash -d p="$HOME/documents/paperasse"
hash -d q="$HOME/downloads/quvi"
hash -d s="$HOME/scans"
hash -d t="$HOME/tablatures"
hash -d v="$HOME/videos"
hash -d w="$HOME/downloads"
hash -d x="$HOME/.bin"
hash -d y="$HOME/sources/_misc/build_sandbox"
hash -d z="$HOME/documents/zines"

hash -d gh="$HOME/sources/_misc/repos/github.me"
hash -d vimfiles='/usr/share/vim/vimfiles'
hash -d pacman_pkg='/var/cache/pacman/pkg'
hash -d py27='/usr/lib/python2.7/site-packages'
hash -d py34='/usr/lib/python3.4/site-packages'
hash -d pyranger=~py34/ranger
############################################################################ }}}

## PROMPT SETUP ############################################################ {{{

setopt PROMPT_SUBST
if [[ $UID = 0 ]] ; then
    # root
    PROMPT=' %F{6}%~ %F{1}# %f'
else
    # non-root

    # include git info in prompt
    autoload vcs_info
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '%F{3}+'
    zstyle ':vcs_info:*' unstagedstr '%F{1}*'
    zstyle ':vcs_info:*' actionformats '(%b|%a) '
    zstyle ':vcs_info:*' formats       ' %F{4}%r %F{2}%S %F{6}%b%u%c'

    # prompt for non-git directories
    zstyle ':vcs_info:*' nvcsformats   ' %F{6}%~'

    precmd () { vcs_info }
    PROMPT='${vcs_info_msg_0_} %(0?,%F{2}\$,%F{1}!)%f '

    # Put out a bell-character ($'\a') everytime a command finishes.
    # This will set the urgency hint, if the terminal is configured accordingly
    if [ "$TERM" != linux ]; then
        # update terminal title
        zle-line-init () {
            print -Pn "\e]0;zsh($?): %~\a"
        }
        zle -N zle-line-init
    fi
fi

# RPROMPT=$' %{$fg[magenta]%}%T%{$reset_color%}'
PS2=' %F{6}%_ %F{2}>%f '
PS3=' %F{6}Choice %F{2}?%f '
PS4=$PS2

zle_highlight=(
special:fg=cyan
default:fg=yellow
isearch:fg=red
)

############################################################################ }}}

## BINDINGS ################################################################ {{{
bindkey -e

bindkey '\e[3~' delete-char       # Del
bindkey '\e[2~' overwrite-mode    # Insert
bindkey '\e[7~' beginning-of-line # home
bindkey '\e[8~' end-of-line       # end

autoload -U     edit-command-line
zle -N          edit-command-line
bindkey '\ee'   edit-command-line
bindkey '\ei'   menu-select  # menu completion via esc-i

bindkey '\e[Z'  reverse-menu-complete # Shift-Tab
bindkey '^I'    expand-or-complete
bindkey '^[:'   describe-key-briefly

bindkey '^R'    history-incremental-pattern-search-backward
bindkey '\e/'   _history-complete-older

bindkey '\e[A'  history-beginning-search-backward # ‚Üë
bindkey '\e[B'  history-beginning-search-forward  # ‚Üì

bindkey '\eOa'  up-line-or-history   # Ctrl-‚Üë
bindkey '\eOb'  down-line-or-history # Ctrl-‚Üì
bindkey '\eOc'  emacs-forward-word   # Ctrl-‚Üí
bindkey '\eOd'  emacs-backward-word  # Ctrl-‚Üê

bindkey '\ev'   vi-cmd-mode
bindkey '^X^V'  vi-cmd-mode

# yaourt bindings (yaourt is a wrapper for pacman, Archlinux's package manager)
bindkey -s '^x^y '  'yaourt '
bindkey -s '^x^y^l' 'yaourt -Ql '      # list package files
bindkey -s '^x^y^t' 'yaourt -Qdt'      # list non required packages
bindkey -s '^x^y^o' 'yaourt -Qo '      # find the package that owns a given file
bindkey -s '^x^y^u' 'yaourt -U '       # install a package from a local file
bindkey -s '^x^y^g' 'yaourt -G '       # get a package's PKGBUILD
bindkey -s '^x^y^r' 'yaourt -Rcs '     # uninstall a package and its unrequired dependencies
bindkey -s '^x^y^i' 'yaourt -Si '      # get informations on a package from repository
bindkey -s '^x^y^q' 'yaourt -Qi '      # get informations on a package installed
bindkey -s '^x^y^s' 'yaourt -S '       # install from repository
bindkey -s '^x^y^b' 'yaourt -Sb '      # build and install a package from sources
bindkey -s '^x^y^c' 'yaourt -C '       # manage .pac* files
bindkey -s '^x^y^d' 'yaourt -Q --date' # list installed package, sorted by date
bindkey -s '^x^y^a' 'yaourt -Qua '     # list outdated package
bindkey -s '^x^y^m' 'yaourt -Qm '      # list package installed locally (built from the AUR, for example)

# Esc,Return multiselect
bindkey -M menuselect '\e^M' accept-and-menu-complete

insert-last-typed-word() { zle insert-last-word -- 0 -1 };
zle -N insert-last-typed-word;
bindkey '\em' insert-last-typed-word

# add a command line to the shells history without executing it
commit-to-history() {
    print -s ${(z)BUFFER}
    zle send-break
}
zle -N commit-to-history
bindkey "^x^h" commit-to-history

############################################################################ }}}

# Alias and functions defined in other files

source ~/.zsh/alias.zsh
source ~/.zsh/funcs.zsh

# alias to edit and compile zsh config
alias zrc='$EDITOR ~/.zshrc ~/.zsh/{alias,funcs}.zsh && source ~/.zshrc && zcompile ~/.zshrc'

# vim: ft=zsh fdm=marker ai ts=2 sw=2 noet :
